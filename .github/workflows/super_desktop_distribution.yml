# Nome del workflow
name: Flutter Desktop Distribution

# Definisce quando il workflow deve essere eseguito
on:
  workflow_dispatch:
  push:
    branches:
      - main  # Si attiva ad ogni push sul branch main

# Definizione dei jobs del workflow
jobs:
  # Job per creare la release
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Questo permesso Ã¨ necessario per creare release
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    # Checkout del repository
    - uses: actions/checkout@v4
    
    # Estrae la versione dal file pubspec.yaml
    - name: Get version
      id: get_version
      run: echo "VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | tr -d "'")" >> $GITHUB_OUTPUT
    
    # Crea una nuova release draft
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: v${{ steps.get_version.outputs.VERSION }}
        draft: true
        prerelease: false

  # Job per buildare e rilasciare l'app per ogni piattaforma
  build-and-release:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output-name: linux
          - os: windows-latest
            output-name: windows
          - os: macos-latest
            output-name: macos
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Generate l10n
      run: flutter gen-l10n
    
    - name: Build for ${{ matrix.output-name }}
      run: |
        flutter config --enable-${{ matrix.output-name }}-desktop
        flutter build ${{ matrix.output-name }} --release
    
    - name: Check build output (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ ! -d "build/linux/x64/release/bundle" ]; then
          echo "Linux build output not found"
          exit 1
        fi
    
    - name: Check build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path "build\windows\x64\runner\Release")) {
          Write-Error "Windows build output not found"
          exit 1
        }
    
    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build/linux/x64/release/bundle
        zip -r ../../../../../WDDM_v${{ needs.create-release.outputs.version }}_linux.zip *
        cd -
    
    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath WDDM_v${{ needs.create-release.outputs.version }}_windows.zip
    
    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: |
        ditto -c -k --sequesterRsrc --keepParent build/macos/Build/Products/Release/*.app WDDM_v${{ needs.create-release.outputs.version }}_macos.zip
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./WDDM_v${{ needs.create-release.outputs.version }}_${{ matrix.output-name }}.zip
        asset_name: WDDM_v${{ needs.create-release.outputs.version }}_${{ matrix.output-name }}.zip
        asset_content_type: application/zip

    - name: Upload error logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: error-logs-${{ matrix.output-name }}
        path: |
          build/**/*.log
          **/*.log
